# config.py

"""
Configuration Module for WeatherFlow Data Processing System

This module defines various configuration settings used throughout the WeatherFlow data
processing system. It includes settings for database connections, logging, API tokens, 
module enablement flags, and other general configurations required for the system's 
operation.

Key Features:
- Centralized configuration management for the entire WeatherFlow data processing system.
- Configurable settings for database connections, specifically InfluxDB parameters.
- Logging levels for both console and file logging to manage verbosity.
- Enablement flags for various modules like UDP, WebSocket, Forecast, and REST API collectors.
- Configuration for JSON API data export, determining which modules export data for analysis.
- Settings for API tokens and URLs for accessing WeatherFlow and other external APIs.

Usage:
The configuration settings defined in this module are imported and used across various
components of the WeatherFlow data processing system. These settings control aspects like
database connections, data export behaviors, logging levels, and intervals for data fetching.

Dependencies:
This module does not have dependencies on other custom modules but may be used by many
other modules within the WeatherFlow data processing system.

Configuration Options:
- Database connection settings (URL, token, organization, bucket)
- Logging levels and directory
- Enablement flags for different data processing modules
- API token and specific API-related settings
- Data export enablement and directory settings
- Fetch intervals for Forecast and REST API data

Author: Dave Schmid
Created: 2023-12-17
"""

import os

# --------------------
# General Configuration
# --------------------

# WeatherFlow API Token for data access

# Tyle
WEATHERFLOW_COLLECTOR_API_TOKEN = os.getenv("WEATHERFLOW_COLLECTOR_API_TOKEN")


WEATHERFLOW_COLLECTOR_API_RATE_LIMIT = int(
    os.getenv("WEATHERFLOW_COLLECTOR_API_RATE_LIMIT", 15)
)

# Base directory for saving API data
WEATHERFLOW_COLLECTOR_API_DATA_SAVE_DIR = os.getenv(
    "WEATHERFLOW_COLLECTOR_API_DATA_SAVE_DIR", "api_data_saver"
)

# Configuration file path for WeatherFlow stations
WEATHERFLOW_COLLECTOR_CONFIG_FILE = os.getenv(
    "WEATHERFLOW_COLLECTOR_CONFIG_FILE", "conf/weatherflow_station.conf"
)

WEATHERFLOW_COLLECTOR_PRIMARY_SOURCE = os.getenv(
    "WEATHERFLOW_COLLECTOR_PRIMARY_SOURCE", "collector_websocket"
)

WEATHERFLOW_COLLECTOR_UDP_BUFFER_SIZE = int(
    os.getenv("WEATHERFLOW_COLLECTOR_UDP_BUFFER_SIZE", 4096)
)
WEATHERFLOW_COLLECTOR_UDP_COLLECTOR_MAX_RETRIES = int(
    os.getenv("WEATHERFLOW_COLLECTOR_UDP_COLLECTOR_MAX_RETRIES", 5)
)
WEATHERFLOW_COLLECTOR_UDP_COLLECTOR_PORT = int(
    os.getenv("WEATHERFLOW_COLLECTOR_UDP_COLLECTOR_PORT", 50222)
)
WEATHERFLOW_COLLECTOR_UDP_COLLECTOR_RETRY_DELAY = int(
    os.getenv("WEATHERFLOW_COLLECTOR_UDP_COLLECTOR_RETRY_DELAY", 5)
)
WEATHERFLOW_COLLECTOR_UDP_LISTEN_ADDRESS = os.getenv(
    "WEATHERFLOW_COLLECTOR_UDP_LISTEN_ADDRESS", "0.0.0.0"
)

WEATHERFLOW_COLLECTOR_PROVIDER_WEBSOCKET_SERVER_CLEANUP_CONNECTIONS_INTERVAL = int(
    os.getenv(
        "WEATHERFLOW_COLLECTOR_PROVIDER_WEBSOCKET_SERVER_CLEANUP_CONNECTIONS_INTERVAL",
        60,
    )
)
WEATHERFLOW_COLLECTOR_PROVIDER_WEBSOCKET_SERVER_MAX_CONNECTIONS = int(
    os.getenv("WEATHERFLOW_COLLECTOR_PROVIDER_WEBSOCKET_SERVER_MAX_CONNECTIONS", 100)
)
WEATHERFLOW_COLLECTOR_PROVIDER_WEBSOCKET_SERVER_PING_INTERVAL = int(
    os.getenv("WEATHERFLOW_COLLECTOR_PROVIDER_WEBSOCKET_SERVER_PING_INTERVAL", 30)
)
WEATHERFLOW_COLLECTOR_PROVIDER_WEBSOCKET_SERVER_PING_TIMEOUT = int(
    os.getenv("WEATHERFLOW_COLLECTOR_PROVIDER_WEBSOCKET_SERVER_PING_TIMEOUT", 10)
)
WEATHERFLOW_COLLECTOR_PROVIDER_WEBSOCKET_SERVER_HOST = os.getenv(
    "WEATHERFLOW_COLLECTOR_PROVIDER_WEBSOCKET_SERVER_HOST", "0.0.0.0"
)
WEATHERFLOW_COLLECTOR_PROVIDER_WEBSOCKET_SERVER_PORT = int(
    os.getenv("WEATHERFLOW_COLLECTOR_PROVIDER_WEBSOCKET_SERVER_PORT", 6789)
)

WEATHERFLOW_COLLECTOR_PROVIDER_WEBSOCKET_RETRY_DELAY = int(
    os.getenv("WEATHERFLOW_COLLECTOR_PROVIDER_WEBSOCKET_RETRY_DELAY", 1)
)

WEATHERFLOW_COLLECTOR_PROVIDER_WEBSOCKET_MAX_DELAY = int(
    os.getenv("WEATHERFLOW_COLLECTOR_PROVIDER_WEBSOCKET_MAX_DELAY", 60)
)

WEATHERFLOW_COLLECTOR_PROVIDER_WEBSOCKET_MAX_RETRIES = int(
    os.getenv("WEATHERFLOW_COLLECTOR_PROVIDER_WEBSOCKET_MAX_RETRIES", 20)
)


WEATHERFLOW_COLLECTOR_COLLECTOR_WEBSOCKET_RETRY_DELAY = int(
    os.getenv("WEATHERFLOW_COLLECTOR_COLLECTOR_WEBSOCKET_RETRY_DELAY", 1)
)

WEATHERFLOW_COLLECTOR_COLLECTOR_WEBSOCKET_MAX_DELAY = int(
    os.getenv("WEATHERFLOW_COLLECTOR_COLLECTOR_WEBSOCKET_MAX_DELAY", 60)
)

WEATHERFLOW_COLLECTOR_COLLECTOR_WEBSOCKET_MAX_RETRIES = int(
    os.getenv("WEATHERFLOW_COLLECTOR_COLLECTOR_WEBSOCKET_MAX_RETRIES", 20)
)


# InfluxDB Configuration
WEATHERFLOW_COLLECTOR_INFLUXDB_URL = os.getenv("WEATHERFLOW_COLLECTOR_INFLUXDB_URL")
WEATHERFLOW_COLLECTOR_INFLUXDB_TOKEN = os.getenv("WEATHERFLOW_COLLECTOR_INFLUXDB_TOKEN")
WEATHERFLOW_COLLECTOR_INFLUXDB_ORG = os.getenv("WEATHERFLOW_COLLECTOR_INFLUXDB_ORG")
WEATHERFLOW_COLLECTOR_INFLUXDB_BUCKET = os.getenv(
    "WEATHERFLOW_COLLECTOR_INFLUXDB_BUCKET"
)

# MySQL Configuration
WEATHERFLOW_COLLECTOR_MYSQL_USER = os.getenv("WEATHERFLOW_COLLECTOR_MYSQL_USER")
WEATHERFLOW_COLLECTOR_MYSQL_PASSWORD = os.getenv("WEATHERFLOW_COLLECTOR_MYSQL_PASSWORD")
WEATHERFLOW_COLLECTOR_MYSQL_HOST = os.getenv("WEATHERFLOW_COLLECTOR_MYSQL_HOST")
WEATHERFLOW_COLLECTOR_MYSQL_DATABASE = os.getenv("WEATHERFLOW_COLLECTOR_MYSQL_DATABASE")


WEATHERFLOW_COLLECTOR_STORAGE_INFLUXDB_BATCH_SIZE = int(
    os.getenv("WEATHERFLOW_COLLECTOR_STORAGE_INFLUXDB_BATCH_SIZE", 2000)
)
WEATHERFLOW_COLLECTOR_STORAGE_INFLUXDB_FLUSH_INTERVAL = int(
    os.getenv("WEATHERFLOW_COLLECTOR_STORAGE_INFLUXDB_FLUSH_INTERVAL", 1000)
)
WEATHERFLOW_COLLECTOR_STORAGE_INFLUXDB_JITTER_INTERVAL = int(
    os.getenv("WEATHERFLOW_COLLECTOR_STORAGE_INFLUXDB_JITTER_INTERVAL", 0)
)
WEATHERFLOW_COLLECTOR_STORAGE_INFLUXDB_MAX_CLOSE_WAIT = int(
    os.getenv("INFLUXDB_MAX_CLOSE_WAIT", 300000)
)
WEATHERFLOW_COLLECTOR_STORAGE_INFLUXDB_MAX_RETRIES = int(
    os.getenv("WEATHERFLOW_COLLECTOR_STORAGE_INFLUXDB_MAX_RETRIES", 5)
)
WEATHERFLOW_COLLECTOR_STORAGE_INFLUXDB_MAX_RETRY_DELAY = int(
    os.getenv("WEATHERFLOW_COLLECTOR_STORAGE_INFLUXDB_MAX_RETRY_DELAY", 125000)
)
WEATHERFLOW_COLLECTOR_STORAGE_INFLUXDB_MAX_RETRY_TIME = int(
    os.getenv("WEATHERFLOW_COLLECTOR_STORAGE_INFLUXDB_MAX_RETRY_TIME", 180000)
)
WEATHERFLOW_COLLECTOR_STORAGE_INFLUXDB_RETRY_INTERVAL = int(
    os.getenv("WEATHERFLOW_COLLECTOR_STORAGE_INFLUXDB_RETRY_INTERVAL", 5000)
)
WEATHERFLOW_COLLECTOR_STORAGE_INFLUXDB_TIMEOUT = int(
    os.getenv("WEATHERFLOW_COLLECTOR_STORAGE_INFLUXDB_TIMEOUT", 30000)
)


# Event Manager Configuration

WEATHERFLOW_COLLECTOR_EVENT_MANAGER_MAX_RETRIES = int(
    os.getenv("WEATHERFLOW_COLLECTOR_EVENT_MANAGER_MAX_RETRIES", 5)
)

WEATHERFLOW_COLLECTOR_EVENT_MANAGER_RETRY_DELAY = int(
    os.getenv("WEATHERFLOW_COLLECTOR_EVENT_MANAGER_RETRY_DELAY", 1)
)


# Logging Configuration
WEATHERFLOW_COLLECTOR_LOG_DIRECTORY = os.getenv(
    "WEATHERFLOW_COLLECTOR_LOG_DIRECTORY", "logs"
)


# Module Enablement Flags
WEATHERFLOW_COLLECTOR_COLLECTOR_EXPORT_ENABLED = (
    os.getenv("WEATHERFLOW_COLLECTOR_COLLECTOR_EXPORT_ENABLED", "False").lower()
    == "true"
)
WEATHERFLOW_COLLECTOR_STORAGE_FILE_ENABLED = (
    os.getenv("WEATHERFLOW_COLLECTOR_STORAGE_FILE_ENABLED", "False").lower() == "true"
)
WEATHERFLOW_COLLECTOR_STORAGE_INFLUXDB_ENABLED = (
    os.getenv("WEATHERFLOW_COLLECTOR_STORAGE_INFLUXDB_ENABLED", "True").lower()
    == "true"
)
WEATHERFLOW_COLLECTOR_COLLECTOR_REST_EXPORT_ENABLED = (
    os.getenv("WEATHERFLOW_COLLECTOR_COLLECTOR_REST_EXPORT_ENABLED", "False").lower()
    == "true"
)
WEATHERFLOW_COLLECTOR_COLLECTOR_REST_FORECASTS_ENABLED = (
    os.getenv("WEATHERFLOW_COLLECTOR_COLLECTOR_REST_FORECASTS_ENABLED", "True").lower()
    == "true"
)
WEATHERFLOW_COLLECTOR_COLLECTOR_REST_IMPORT_ENABLED = (
    os.getenv("WEATHERFLOW_COLLECTOR_COLLECTOR_REST_IMPORT_ENABLED", "False").lower()
    == "true"
)
WEATHERFLOW_COLLECTOR_COLLECTOR_REST_OBSERVATIONS_DEVICE_ENABLED = (
    os.getenv(
        "WEATHERFLOW_COLLECTOR_COLLECTOR_REST_OBSERVATIONS_DEVICE_ENABLED", "True"
    ).lower()
    == "true"
)
WEATHERFLOW_COLLECTOR_COLLECTOR_REST_OBSERVATIONS_STATION_ENABLED = (
    os.getenv(
        "WEATHERFLOW_COLLECTOR_COLLECTOR_REST_OBSERVATIONS_STATION_ENABLED", "False"
    ).lower()
    == "true"
)
WEATHERFLOW_COLLECTOR_COLLECTOR_REST_STATS_ENABLED = (
    os.getenv("WEATHERFLOW_COLLECTOR_COLLECTOR_REST_STATS_ENABLED", "True").lower()
    == "true"
)
WEATHERFLOW_COLLECTOR_SYSTEM_METRICS_ENABLED = (
    os.getenv("WEATHERFLOW_COLLECTOR_SYSTEM_METRICS_ENABLED", "True").lower() == "true"
)
WEATHERFLOW_COLLECTOR_COLLECTOR_UDP_ENABLED = (
    os.getenv("WEATHERFLOW_COLLECTOR_COLLECTOR_UDP_ENABLED", "True").lower() == "true"
)
WEATHERFLOW_COLLECTOR_COLLECTOR_WEBSOCKET_ENABLED = (
    os.getenv("WEATHERFLOW_COLLECTOR_COLLECTOR_WEBSOCKET_ENABLED", "True").lower()
    == "true"
)
WEATHERFLOW_COLLECTOR_PROVIDER_WEBSOCKET_SERVER_ENABLED = (
    os.getenv("WEATHERFLOW_COLLECTOR_PROVIDER_WEBSOCKET_SERVER_ENABLED", "True").lower()
    == "true"
)
WEATHERFLOW_COLLECTOR_HANDLER_ENABLED = (
    os.getenv("WEATHERFLOW_COLLECTOR_HANDLER_ENABLED", "True").lower() == "true"
)


# Plugin Modules

WEATHERFLOW_COLLECTOR_VINEYARD_VANTAGE_HANDLER_ENABLED = (
    os.getenv("WEATHERFLOW_COLLECTOR_VINEYARD_VANTAGE_HANDLER_ENABLED", "True").lower()
    == "true"
)


# REST Stats

WEATHERFLOW_COLLECTOR_HANDLER_REST_STATS_SUPPRESS_WARNINGS_ENABLED = (
    os.getenv(
        "WEATHERFLOW_COLLECTOR_HANDLER_REST_STATS_SUPPRESS_WARNINGS_ENABLED", "True"
    ).lower()
    == "true"
)


# Storage File Enablement

WEATHERFLOW_COLLECTOR_STORAGE_FILE_COLLECTOR_REST_FORECASTS_ENABLED = (
    os.getenv(
        "WEATHERFLOW_COLLECTOR_STORAGE_FILE_COLLECTOR_REST_FORECASTS_ENABLED", "False"
    ).lower()
    == "true"
)
WEATHERFLOW_COLLECTOR_STORAGE_FILE_COLLECTOR_REST_IMPORT_ENABLED = (
    os.getenv(
        "WEATHERFLOW_COLLECTOR_STORAGE_FILE_COLLECTOR_REST_IMPORT_ENABLED", "False"
    ).lower()
    == "true"
)

WEATHERFLOW_COLLECTOR_STORAGE_FILE_COLLECTOR_REST_EXPORT_ENABLED = (
    os.getenv(
        "WEATHERFLOW_COLLECTOR_STORAGE_FILE_COLLECTOR_REST_EXPORT_ENABLED", "False"
    ).lower()
    == "true"
)

WEATHERFLOW_COLLECTOR_STORAGE_FILE_COLLECTOR_REST_OBSERVATIONS_DEVICE_ENABLED = (
    os.getenv(
        "WEATHERFLOW_COLLECTOR_STORAGE_FILE_COLLECTOR_REST_OBSERVATIONS_DEVICE_ENABLED",
        "False",
    ).lower()
    == "true"
)

WEATHERFLOW_COLLECTOR_STORAGE_FILE_COLLECTOR_REST_OBSERVATIONS_STATION_ENABLED = (
    os.getenv(
        "WEATHERFLOW_COLLECTOR_STORAGE_FILE_COLLECTOR_REST_OBSERVATIONS_STATION_ENABLED",
        "False",
    ).lower()
    == "true"
)

WEATHERFLOW_COLLECTOR_STORAGE_FILE_STATIONCONFIG_ENABLED = (
    os.getenv(
        "WEATHERFLOW_COLLECTOR_STORAGE_FILE_STATIONCONFIG_ENABLED",
        "False",
    ).lower()
    == "true"
)
WEATHERFLOW_COLLECTOR_STORAGE_FILE_COLLECTOR_UDP_ENABLED = (
    os.getenv(
        "WEATHERFLOW_COLLECTOR_STORAGE_FILE_COLLECTOR_UDP_ENABLED", "False"
    ).lower()
    == "true"
)
WEATHERFLOW_COLLECTOR_STORAGE_FILE_COLLECTOR_WEBSOCKET_ENABLED = (
    os.getenv(
        "WEATHERFLOW_COLLECTOR_STORAGE_FILE_COLLECTOR_WEBSOCKET_ENABLED", "False"
    ).lower()
    == "true"
)
WEATHERFLOW_COLLECTOR_STORAGE_FILE_COLLECTOR_REST_STATS_ENABLED = (
    os.getenv(
        "WEATHERFLOW_COLLECTOR_STORAGE_FILE_COLLECTOR_REST_STATS_ENABLED", "False"
    ).lower()
    == "true"
)


WEATHERFLOW_COLLECTOR_ENABLE_INFLUXDB_DATA_STRUCTURE_TRACKING = (
    os.getenv(
        "WEATHERFLOW_COLLECTOR_ENABLE_INFLUXDB_DATA_STRUCTURE_TRACKING", "False"
    ).lower()
    == "true"
)

WEATHERFLOW_COLLECTOR_ENABLE_INFLUXDB_DATA_STRUCTURE_TRACKING_EXPORT_INTERVAL = int(
    os.getenv(
        "WEATHERFLOW_COLLECTOR_ENABLE_INFLUXDB_DATA_STRUCTURE_TRACKING_EXPORT_INTERVAL",
        60,
    )
)

# Base directory for saving API data
WEATHERFLOW_COLLECTOR_ENABLE_INFLUXDB_DATA_STRUCTURE_TRACKING_SAVE_DIR = os.getenv(
    "WEATHERFLOW_COLLECTOR_ENABLE_INFLUXDB_DATA_STRUCTURE_TRACKING_SAVE_DIR", "logs"
)


# Fetch intervals
WEATHERFLOW_COLLECTOR_EXPORT_COLLECTOR_STALE_SEGMENT_DAYS = int(
    os.getenv("WEATHERFLOW_COLLECTOR_EXPORT_COLLECTOR_STALE_SEGMENT_DAYS", 30)
)
WEATHERFLOW_COLLECTOR_REST_EXPORT_FETCH_OBSERVATIONS_WORKERS = int(
    os.getenv("WEATHERFLOW_COLLECTOR_REST_EXPORT_FETCH_OBSERVATIONS_WORKERS", 4)
)
WEATHERFLOW_COLLECTOR_COLLECTOR_REST_OBSERVATIONS_INTERVAL = int(
    os.getenv("WEATHERFLOW_COLLECTOR_COLLECTOR_REST_OBSERVATIONS_INTERVAL", 60)
)
WEATHERFLOW_COLLECTOR_COLLECTOR_REST_IMPORT_FETCH_WORKERS = int(
    os.getenv("WEATHERFLOW_COLLECTOR_COLLECTOR_REST_IMPORT_FETCH_WORKERS", 16)
)
WEATHERFLOW_COLLECTOR_COLLECTOR_REST_FORECASTS_FETCH_INTERVAL = int(
    os.getenv("WEATHERFLOW_COLLECTOR_COLLECTOR_REST_FORECASTS_FETCH_INTERVAL", 60)
)
WEATHERFLOW_COLLECTOR_COLLECTOR_REST_IMPORT_FETCH_OBSERVATIONS_DELAY_MS = int(
    os.getenv(
        "WEATHERFLOW_COLLECTOR_COLLECTOR_REST_IMPORT_FETCH_OBSERVATIONS_DELAY_MS", 200
    )
)


# Influxdb COLLECTOR

WEATHERFLOW_COLLECTOR_STORAGE_INFLUXDB_WORKERS = int(
    os.getenv("WEATHERFLOW_COLLECTOR_STORAGE_INFLUXDB_WORKERS", 8)
)

WEATHERFLOW_COLLECTOR_COLLECTOR_REST_IMPORT_BATCH_SIZE = int(
    os.getenv("WEATHERFLOW_COLLECTOR_COLLECTOR_REST_IMPORT_BATCH_SIZE", 2000)
)

# HTTP Fetch Parameters

WEATHERFLOW_COLLECTOR_UTILS_HTTP_FETCH_RETRIES = int(
    os.getenv("WEATHERFLOW_COLLECTOR_UTILS_HTTP_FETCH_RETRIES", 3)
)

WEATHERFLOW_COLLECTOR_UTILS_HTTP_FETCH_RETRY_WAIT = int(
    os.getenv("WEATHERFLOW_COLLECTOR_UTILS_HTTP_FETCH_RETRY_WAIT", 2)
)

WEATHERFLOW_COLLECTOR_UTILS_HTTP_FETCH_TIMEOUT = int(
    os.getenv("WEATHERFLOW_COLLECTOR_UTILS_HTTP_FETCH_TIMEOUT", 30)
)

# Health Check Configuration

WEATHERFLOW_COLLECTOR_HEALTHCHECK_WEBSOCKETCOLLECTOR_TIMEOUT_SOCKET = int(
    os.getenv("WEATHERFLOW_COLLECTOR_HEALTHCHECK_WEBSOCKETCOLLECTOR_TIMEOUT_SOCKET", 60)
)


WEATHERFLOW_COLLECTOR_ENABLE_HEALTHCHECK_FORECAST = (
    os.getenv("WEATHERFLOW_COLLECTOR_ENABLE_HEALTHCHECK_FORECAST", "True").lower()
    == "true"
)
WEATHERFLOW_COLLECTOR_ENABLE_HEALTHCHECK_REST = (
    os.getenv("WEATHERFLOW_COLLECTOR_ENABLE_HEALTHCHECK_REST", "True").lower() == "true"
)
WEATHERFLOW_COLLECTOR_ENABLE_HEALTHCHECK_SOCKET = (
    os.getenv("WEATHERFLOW_COLLECTOR_ENABLE_HEALTHCHECK_SOCKET", "True").lower()
    == "true"
)
WEATHERFLOW_COLLECTOR_ENABLE_HEALTHCHECK_UDP = (
    os.getenv("WEATHERFLOW_COLLECTOR_ENABLE_HEALTHCHECK_UDP", "True").lower() == "true"
)
WEATHERFLOW_COLLECTOR_HEALTHCHECK_INTERVAL_FORECAST = int(
    os.getenv("WEATHERFLOW_COLLECTOR_HEALTHCHECK_INTERVAL_FORECAST", 15)
)
WEATHERFLOW_COLLECTOR_HEALTHCHECK_INTERVAL_REST = int(
    os.getenv("WEATHERFLOW_COLLECTOR_HEALTHCHECK_INTERVAL_REST", 60)
)
WEATHERFLOW_COLLECTOR_HEALTHCHECK_INTERVAL_SOCKET = int(
    os.getenv("WEATHERFLOW_COLLECTOR_HEALTHCHECK_INTERVAL_SOCKET", 5)
)
WEATHERFLOW_COLLECTOR_HEALTHCHECK_INTERVAL_UDP = int(
    os.getenv("WEATHERFLOW_COLLECTOR_HEALTHCHECK_INTERVAL_UDP", 10)
)

WEATHERFLOW_COLLECTOR_HEALTHCHECK_RELISTEN_SOCKET = int(
    os.getenv("WEATHERFLOW_COLLECTOR_HEALTHCHECK_RELISTEN_SOCKET", 10)
)
WEATHERFLOW_COLLECTOR_HEALTHCHECK_RETRY_DELAY_SOCKET = int(
    os.getenv("WEATHERFLOW_COLLECTOR_HEALTHCHECK_RETRY_DELAY_SOCKET", 120)
)
WEATHERFLOW_COLLECTOR_HEALTHCHECK_STARTUP_DELAY_FORECAST = int(
    os.getenv("WEATHERFLOW_COLLECTOR_HEALTHCHECK_STARTUP_DELAY_FORECAST", 60)
)
WEATHERFLOW_COLLECTOR_HEALTHCHECK_STARTUP_DELAY_REST = int(
    os.getenv("WEATHERFLOW_COLLECTOR_HEALTHCHECK_STARTUP_DELAY_REST", 120)
)
WEATHERFLOW_COLLECTOR_HEALTHCHECK_STARTUP_DELAY_SOCKET = int(
    os.getenv("WEATHERFLOW_COLLECTOR_HEALTHCHECK_STARTUP_DELAY_SOCKET", 60)
)
WEATHERFLOW_COLLECTOR_HEALTHCHECK_STARTUP_DELAY_UDP = int(
    os.getenv("WEATHERFLOW_COLLECTOR_HEALTHCHECK_STARTUP_DELAY_UDP", 60)
)
WEATHERFLOW_COLLECTOR_HEALTHCHECK_THRESHOLD_FORECAST = int(
    os.getenv("WEATHERFLOW_COLLECTOR_HEALTHCHECK_THRESHOLD_FORECAST", 3000)
)
WEATHERFLOW_COLLECTOR_HEALTHCHECK_THRESHOLD_REST = int(
    os.getenv("WEATHERFLOW_COLLECTOR_HEALTHCHECK_THRESHOLD_REST", 60)
)
WEATHERFLOW_COLLECTOR_HEALTHCHECK_THRESHOLD_SOCKET = int(
    os.getenv("WEATHERFLOW_COLLECTOR_HEALTHCHECK_THRESHOLD_SOCKET", 900)
)
WEATHERFLOW_COLLECTOR_HEALTHCHECK_THRESHOLD_UDP = int(
    os.getenv("WEATHERFLOW_COLLECTOR_HEALTHCHECK_THRESHOLD_UDP", 10)
)

# O11y Configuration
WEATHERFLOW_COLLECTOR_ENABLE_O11Y_FORECAST = (
    os.getenv("WEATHERFLOW_COLLECTOR_ENABLE_O11Y_FORECAST", "True").lower() == "true"
)
WEATHERFLOW_COLLECTOR_ENABLE_O11Y_REST = (
    os.getenv("WEATHERFLOW_COLLECTOR_ENABLE_O11Y_REST", "True").lower() == "true"
)
WEATHERFLOW_COLLECTOR_ENABLE_O11Y_SOCKET = (
    os.getenv("WEATHERFLOW_COLLECTOR_ENABLE_O11Y_SOCKET", "True").lower() == "true"
)
WEATHERFLOW_COLLECTOR_ENABLE_O11Y_UDP = (
    os.getenv("WEATHERFLOW_COLLECTOR_ENABLE_O11Y_UDP", "True").lower() == "true"
)
WEATHERFLOW_COLLECTOR_O11Y_INTERVAL_FORECAST = int(
    os.getenv("WEATHERFLOW_COLLECTOR_O11Y_INTERVAL_FORECAST", 15)
)
WEATHERFLOW_COLLECTOR_O11Y_INTERVAL_REST = int(
    os.getenv("WEATHERFLOW_COLLECTOR_O11Y_INTERVAL_REST", 60)
)
WEATHERFLOW_COLLECTOR_O11Y_INTERVAL_SOCKET = int(
    os.getenv("WEATHERFLOW_COLLECTOR_O11Y_INTERVAL_SOCKET", 1)
)
WEATHERFLOW_COLLECTOR_O11Y_INTERVAL_UDP = int(
    os.getenv("WEATHERFLOW_COLLECTOR_O11Y_INTERVAL_UDP", 10)
)
WEATHERFLOW_COLLECTOR_O11Y_STARTUP_DELAY_FORECAST = int(
    os.getenv("WEATHERFLOW_COLLECTOR_O11Y_STARTUP_DELAY_FORECAST", 60)
)
WEATHERFLOW_COLLECTOR_O11Y_STARTUP_DELAY_REST = int(
    os.getenv("WEATHERFLOW_COLLECTOR_O11Y_STARTUP_DELAY_REST", 120)
)
WEATHERFLOW_COLLECTOR_O11Y_STARTUP_DELAY_SOCKET = int(
    os.getenv("WEATHERFLOW_COLLECTOR_O11Y_STARTUP_DELAY_SOCKET", 0)
)
WEATHERFLOW_COLLECTOR_O11Y_STARTUP_DELAY_UDP = int(
    os.getenv("WEATHERFLOW_COLLECTOR_O11Y_STARTUP_DELAY_UDP", 60)
)
WEATHERFLOW_COLLECTOR_O11Y_THRESHOLD_FORECAST = int(
    os.getenv("WEATHERFLOW_COLLECTOR_O11Y_THRESHOLD_FORECAST", 3000)
)
WEATHERFLOW_COLLECTOR_O11Y_THRESHOLD_REST = int(
    os.getenv("WEATHERFLOW_COLLECTOR_O11Y_THRESHOLD_REST", 60)
)
WEATHERFLOW_COLLECTOR_O11Y_THRESHOLD_UDP = int(
    os.getenv("WEATHERFLOW_COLLECTOR_O11Y_THRESHOLD_UDP", 10)
)

# Import / Export Configuration
WEATHERFLOW_COLLECTOR_ENABLE_IMPORT_EXPORT_CACHE = (
    os.getenv("WEATHERFLOW_COLLECTOR_ENABLE_IMPORT_EXPORT_CACHE", "True").lower()
    == "true"
)
WEATHERFLOW_COLLECTOR_ENABLE_IMPORT_EXPORT_CACHE_EXCLUDE_RECENT_HOURS = (
    os.getenv(
        "WEATHERFLOW_COLLECTOR_ENABLE_IMPORT_EXPORT_CACHE_EXCLUDE_RECENT_HOURS", "True"
    ).lower()
    == "true"
)
WEATHERFLOW_COLLECTOR_PROCESSOR_EXPORT_BUCKET = os.getenv(
    "WEATHERFLOW_COLLECTOR_PROCESSOR_EXPORT_BUCKET", "month"
)
WEATHERFLOW_COLLECTOR_PROCESSOR_EXPORT_FOLDER = os.getenv(
    "WEATHERFLOW_COLLECTOR_PROCESSOR_EXPORT_FOLDER", "export"
)

WEATHERFLOW_COLLECTOR_PROCESSOR_EXPORT_WORKERS = int(
    os.getenv("WEATHERFLOW_COLLECTOR_PROCESSOR_EXPORT_WORKERS", 8)
)


WEATHERFLOW_COLLECTOR_PROCESSOR_EXPORT_TYPE = os.getenv(
    "WEATHERFLOW_COLLECTOR_PROCESSOR_EXPORT_TYPE", "csv"
)
WEATHERFLOW_COLLECTOR_PROCESSOR_EXPORT_CACHE_EXCLUDE_RECENT_HOURS = int(
    os.getenv("WEATHERFLOW_COLLECTOR_PROCESSOR_EXPORT_CACHE_EXCLUDE_RECENT_HOURS", 48)
)
WEATHERFLOW_COLLECTOR_PROCESSOR_EXPORT_CACHE_FOLDER = os.getenv(
    "WEATHERFLOW_COLLECTOR_PROCESSOR_EXPORT_CACHE_FOLDER", "cache"
)
WEATHERFLOW_COLLECTOR_PROCESSOR_EXPORT_CACHE_TTL = int(
    os.getenv("WEATHERFLOW_COLLECTOR_PROCESSOR_EXPORT_CACHE_TTL", 7200)
)


WEATHERFLOW_COLLECTOR_LOGGER_CONSOLE_USE_COLOR_ENABLED = (
    os.getenv("WEATHERFLOW_COLLECTOR_LOGGER_CONSOLE_USE_COLOR_ENABLED", "True").lower()
    == "true"
)

WEATHERFLOW_COLLECTOR_LOGGER_CONSOLE_ENABLED = (
    os.getenv("WEATHERFLOW_COLLECTOR_LOGGER_CONSOLE_ENABLED", "True").lower() == "true"
)

WEATHERFLOW_COLLECTOR_LOGGER_FILE_USE_COLOR_ENABLED = (
    os.getenv("WEATHERFLOW_COLLECTOR_LOGGER_FILE_USE_COLOR_ENABLED", "False").lower()
    == "true"
)

WEATHERFLOW_COLLECTOR_LOGGER_FILE_ENABLED = (
    os.getenv("WEATHERFLOW_COLLECTOR_LOGGER_FILE_ENABLED", "False").lower() == "true"
)


# --------------------
# API Configuration
# --------------------

WEATHERFLOW_API_REST_BASE_URL = "https://swd.weatherflow.com/swd/rest"
WEATHERFLOW_API_REST_STATS_URL = f"{WEATHERFLOW_API_REST_BASE_URL}/stats"
WEATHERFLOW_API_REST_OBSERVATIONS_URL = f"{WEATHERFLOW_API_REST_BASE_URL}/observations"
WEATHERFLOW_API_REST_IMPORT_URL = f"{WEATHERFLOW_API_REST_BASE_URL}/observations"
WEATHERFLOW_API_REST_FORECASTS_URL = f"{WEATHERFLOW_API_REST_BASE_URL}/better_forecast"
WEATHERFLOW_API_REST_STATIONS_URL = f"{WEATHERFLOW_API_REST_BASE_URL}/stations"

WEATHERFLOW_API_WEBSOCKET_URL = (
    "wss://ws.weatherflow.com/swd/data?token=" + WEATHERFLOW_COLLECTOR_API_TOKEN
)

# Base HTTP URL for WeatherFlow REST API for Station Data
WEATHERFLOW_API_BASE_HTTP_URL = "https://swd.weatherflow.com/swd/rest"

# HTTP URL for fetching station statistics
WEATHERFLOW_API_HTTP_STATION_STATS_URL = f"{WEATHERFLOW_API_BASE_HTTP_URL}/stats/station/{{station_id}}?api_key={WEATHERFLOW_COLLECTOR_API_TOKEN}"


# Console Log Levels

WEATHERFLOW_COLLECTOR_CONSOLE_LOG_LEVELS = {
    "collector": "INFO",
    "event_manager": "INFO",
    "get_module_logger": "INFO",
    "handlers": "INFO",
    "logger": "INFO",
    "processor": "INFO",
    "protocol": "INFO",
    "provider": "INFO",
    "station_metadata_manager": "INFO",
    "storage": "INFO",
    "utils": "INFO",
    "websockets": "INFO",
    "vineyard_vantage": "INFO",
}

# File Log Levels
WEATHERFLOW_COLLECTOR_FILE_LOG_LEVELS = {
    "collector": "DEBUG",
    "event_manager": "DEBUG",
    "get_module_logger": "DEBUG",
    "handlers": "DEBUG",
    "logger": "DEBUG",
    "processor": "DEBUG",
    "protocol": "DEBUG",
    "provider": "DEBUG",
    "station_metadata_manager": "DEBUG",
    "storage": "DEBUG",
    "utils": "DEBUG",
    "websockets": "DEBUG",
}
